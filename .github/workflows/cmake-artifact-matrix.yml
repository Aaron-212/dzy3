name: CMake Build on multiple platforms

on:
  push:
    tags:
      - v*
jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug]
        include:
          - os: windows-latest
            cpp_compiler: cl
            install_packages_script: scripts/setup_packages.ps1
          - os: ubuntu-latest
            cpp_compiler: clang++
            install_packages_script: scripts/setup_packages.sh
          - os: macos-latest
            cpp_compiler: clang++
            install_packages_script: scripts/setup_packages.sh

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install packages on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: ./${{ matrix.install_packages_script }}

      - name: Install packages on Linux and MacOS
        if: ${ {matrix.os != 'windows-latest' }}
        run: |
          chmod +x ./${{ matrix.install_packages_script }}
          ./${{ matrix.install_packages_script }}

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Compress Build Artifacts
        if: success()
        run: |
          output_name=build-${{ matrix.os }}-${{ matrix.build_type }}.tar.gz
          tar -czf $output_name -C ${{ steps.strings.outputs.build-output-dir }} .
          echo "artifact_name=$output_name" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.artifact_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
